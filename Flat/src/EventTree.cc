// THIS FILE IS AUTOGENERATED //
#include "../interface/EventTree.h"
// STARTCUSTOM INCLUDE

#include <iostream>

//ENDCUSTOM
EventTree::EventTree() {
// STARTCUSTOM CONSTRUCTOR
// ENDCUSTOM
  Reset();
}
EventTree::~EventTree() {
// STARTCUSTOM DESTRUCTOR
// ENDCUSTOM
}
void EventTree::SetAuxTree(TTree *t) {
// STARTCUSTOM AUX
// ENDCUSTOM
}
void EventTree::Reset() {
// STARTCUSTOM RESET
// ENDCUSTOM
  runNumber = 0;
  lumiNumber = 0;
  eventNumber = -99;
  isData = 0;
  npv = 0;
  pu = 0;
  rho = -99;
  mcWeight = -99;
}
void EventTree::WriteTree(TTree *t) {
  treePtr = t;
// STARTCUSTOM WRITE
// ENDCUSTOM
  Book("runNumber",&runNumber,"runNumber/I");
  Book("lumiNumber",&lumiNumber,"lumiNumber/I");
  Book("eventNumber",&eventNumber,"eventNumber/l");
  Book("isData",&isData,"isData/I");
  Book("npv",&npv,"npv/I");
  Book("pu",&pu,"pu/I");
  Book("rho",&rho,"rho/F");
  Book("mcWeight",&mcWeight,"mcWeight/F");
}
void EventTree::ReadTree(TTree *t) {
  treePtr = t;
  treePtr->SetBranchStatus("*",0);
// STARTCUSTOM READ
// ENDCUSTOM
  Bind("runNumber",&runNumber);
  Bind("lumiNumber",&lumiNumber);
  Bind("eventNumber",&eventNumber);
  Bind("isData",&isData);
  Bind("npv",&npv);
  Bind("pu",&pu);
  Bind("rho",&rho);
  Bind("mcWeight",&mcWeight);
}